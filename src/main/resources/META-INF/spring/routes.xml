<?xml version="1.0" encoding="UTF-8"?>
<!--******************************************************************* -->
<!--* SWIFT owns the copyright on the source code samples provided * -->
<!--* as part of IPLA Standalone, and grants the customer a right to * -->
<!--* copy, use, and adapt them for the purpose of implementing * -->
<!--* integration flow using IPLA Standalone. * -->
<!--* SWIFT provides these source code samples for the customerÂ’'s * -->
<!--* convenience, and without warranties as to their completeness, * -->
<!--* fitness for a particular purpose, frequency of updates, ease * -->
<!--* of maintenance, or absence of errors. * -->
<!--******************************************************************* -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:spring="http://camel.apache.org/schema/spring"
  xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!-- All Alliance Converter projects must import this file -->
  <import resource="classpath:/com/swift/iplasa/spring/iplasa-context.xml" />

  <bean id="lite2ac" class="com.swift.iplasa.camel.components.lite2ac.Lite2acComponent">
    <property name="autoClientBaseDirectory" value="{{lite2ac.root}}" />
  </bean>

  <!-- Split RJE files into individual FIN messages -->
  <bean id="rjeFileSplitter" class="com.swift.iplasa.camel.components.lite2ac.RJEFileSplitter" />

  <!-- Parse a single FIN message and extract its type -->
  <bean id="parseMT" class="com.swift.iplasa.camel.processors.ParseMT" />

  <!-- Flag a MT message as PDE -->
  <bean id="flagMTasPDE" class="com.swift.iplasa.camel.processors.FlagMTasPDE" />

  <!-- LAU -->
  <!-- @param lauHeaderName the name of the Exchange header on which to store the lau after computation or to retrieve for verification. Defaults to 'IPLASA_MSG_HASH' -->
  <!-- @param verificationResultHeaderName the name of the Exchange header on which to store the result of the lau hash verification (in case failInException property is set to false). Defaults to 'IPLASA.LAU_VERIFICATION' -->
  <!-- @param charset If the data for which to compute/verify the LAU hash is a String, the charset to use when getting the bytes from this String. Defaults to current exchange's 'Exchange.DEFAULT_CHARSET_PROPERTY' -->
  <!-- @param failInException Should exceptions (com.swift.iplasa.framework.security.IplaSecurityException) be thrown if LAU verifications fail due to mismatch? Defaults to true -->
  <!-- @param secretKey The secret key to use to compute/verify the hash. No default value. Mandatory -->
  <bean id="lauProcessor" class="com.swift.iplasa.camel.beans.LauProcessor">
    <!-- property name="lauHeaderName" value="IPLASA_MSG_HASH" / -->
    <!-- property name="verificationResultHeaderName" value="IPLASA.LAU_VERIFICATION" / -->
    <property name="charset" value="UTF-8" />
    <!-- property name="failInException" value="false"/ -->
    <property name="secretKey" value="{{wmq.lau.secure}}" />
  </bean>

  <!-- WebsphereMQ -->
  <!-- SSL Configuration - Uncomment the following lines to use SSL -->
  <!-- <bean id="SSLConfiguration" class="com.swift.flows.lite2.fin.fromswift.wmq.jms.g2ns.beans.SSLConfiguration"> -->
  <!-- <property name="keystore" value="{{ssl.keystore}}"/> -->
  <!-- <property name="keystorePassword" value="{{ssl.keystore.password.secure}}"/> -->
  <!-- <property name="truststore" value="{{ssl.truststore}}"/> -->
  <!-- </bean> -->

  <bean id="wmq" class="org.apache.camel.component.jms.JmsComponent">
    <property name="transacted" value="true" />
    <property name="connectionFactory">
      <bean class="com.ibm.mq.jms.MQConnectionFactory">
        <!-- transportType=1 means that a TCP/IP connection is used to connect to the MQ broker. -->
        <property name="transportType" value="1" />
        <property name="hostName" value="{{wmq.hostname}}" />
        <property name="port" value="{{wmq.port}}" />
        <property name="channel" value="{{wmq.channel}}" />
        <property name="queueManager" value="{{wmq.queuemanager}}" />
        <!-- SSL Configuration - Uncomment the following lines to use SSL -->
        <!-- <property name="SSLCipherSuite" value="{{ssl.ciphersuite}}"/> -->
        <!-- <property name="SSLSocketFactory" value="#{SSLConfiguration.SSLSocketFactory}"/> -->
      </bean>
    </property>
  </bean>

  <camelContext id="Lite2-Fin-FromSwift-WMQ_JMS-G2nS" xmlns="http://camel.apache.org/schema/spring">

    <onException>
      <exception>javax.jms.JMSException</exception>
      <exception>org.springframework.jms.IllegalStateException</exception>
      <redeliveryPolicy redeliveryDelay="5000" maximumRedeliveries="{{wmq.maximumRedeliveries}}" logRetryAttempted="true" />
    </onException>

    <onException>
      <!-- Any other exception is considered an exception which we can't do anything about. Move the message to an error queue for investigation -->
      <!-- note that "com.swift.iplasa.framework.security.IplaSecurityException"s, potentially occurring when the computation of the LAU hash fails for internal reasons, is part of this error processing. -->
      <exception>java.lang.Exception</exception>
      <handled>
        <constant>true</constant>
      </handled>
      <log message="A message will be moved to the DLQ '{{wmq.queue.DLQ}}' because an exception has been thrown:\n ${exception.stacktrace}" loggingLevel="WARN" logName="audit" />
      <log message="Caught ${exception.class.name} : ${exception.message} :\n${exception.stacktrace}" loggingLevel="ERROR" />
      <to uri="wmq:{{wmq.queue.DLQ}}" />
    </onException>

    <route id="RJEfromLite2ToWMQ">
      <from uri="lite2ac://{{lite2ac.reception}}?filter=fin" />

      <split>
        <method bean="rjeFileSplitter" />
        <to uri="direct:HandleMTMessage" />
      </split>
    </route>

    <route id="handleMTMessage" startupOrder="10">
      <from uri="direct:HandleMTMessage" />

      <!-- Parse the current FIN message and extract some useful headers -->
      <process ref="parseMT" />

      <!-- If the file has already been processed by the Lite2 AC component, add a PDE to every MT message. -->
      <when>
        <simple>${header.Lite2acAlreadyProcessed} == true</simple>
        <bean ref="flagMTasPDE" />
        <log message="Marking the message as a possible duplicate since the message has already been processed by Lite2 AC component" loggingLevel="WARN" logName="audit" />
      </when>

      <!-- Compute the LAU hash on the "IPLASA.MSG_HASH" Camel header. This header will be stored as a JMS message property when sent to ActiveMQ and can be checked back by the client application when 
        it retrieves the message on its side -->
      <bean ref="lauProcessor" method="computeJmsLauData" />

      <choice>
        <when>
          <simple>${header.FinIsUserToUserMessage} == true</simple>
          <log message="Processing MT message of type: ${header.FinMessageIdentifier}" />
          <to uri="wmq:{{wmq.queue.message}}" />
          <log message="An MT '${header.FinMessageIdentifier}' has been sent to the queue '{{wmq.queue.message}}'." logName="audit" />
        </when>
        <when>
          <simple>${header.FinMessageIdentifier} == 'fin.F21'</simple>
          <log message="Processing MT transmission notification" />
          <to uri="wmq:{{wmq.queue.transmissionNotification}}" />
          <log message="An MT transmission notification (${header.FinMessageIdentifier}) has been sent to the queue '{{wmq.queue.transmissionNotification}}'." logName="audit" />
        </when>
        <when>
          <simple>${header.FinMessageIdentifier} in 'fin.010,fin.011,fin.012,fin.015,fin.019'</simple>
          <log message="Processing MT delivery notification" />
          <to uri="wmq:{{wmq.queue.deliveryNotification}}" />
          <log message="An MT delivery notification (${header.FinMessageIdentifier}) has been sent to the queue '{{wmq.queue.deliveryNotification}}'." logName="audit" />
        </when>
        <otherwise>
          <log message="Filtering out unuseful MT message" />
          <to uri="file:{{filteredMTMessagesFolder}}?fileName=${exchangeId}-filtered.fin" />
          <log message="An unuseful MT message has been filtered out and sent to the '{{filteredMTMessagesFolder}}' folder." logName="audit" />
        </otherwise>
      </choice>

    </route>
  </camelContext>
</beans>   
